@{
    ViewBag.Title = "Home Page";
}

<style>

    #canvas {
        border: 1px solid red;
    }
</style>
<head>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/104/three.js"></script>

</head>
<br />
<br />
<canvas id="canvas" width="1000" height="1000"></canvas>

@*<div id="canvas"></div>*@



@section scripts
{
    <script>
        $(function() {

            var canvas = document.getElementById("canvas");
            var ctx = canvas.getContext("2d");
            ctx.lineWidth = 2;

            var canvasOffset = $("#canvas").offset();
            var offsetX = canvasOffset.left;
            var offsetY = canvasOffset.top;

            var img = new Image();
            img.onload = function() {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                ctx.globalAlpha = 0.7;


            }
            //img.src = "https://i.imgur.com/mxOL8YW.jpg";
            img.src = "https://i.imgur.com/QNu5z2C.png";

            function handleMouseMove(e) {
                mouseX = parseInt(e.clientX - offsetX);
                mouseY = parseInt(e.clientY - offsetY);

                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0);
                ctx.beginPath();
                ctx.moveTo(mouseX, 0);
                ctx.lineTo(mouseX, canvas.height);
                ctx.moveTo(0, mouseY);
                ctx.lineTo(canvas.width, mouseY);
                ctx.stroke();


            }

            $("#canvas").mousemove(function(e) { handleMouseMove(e); });


        }); // end $(function(){});

        //var scene = new THREE.Scene();
        //var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 10, 1000);
        //var renderer = new THREE.WebGLRenderer();
        //renderer.setSize(window.innerWidth, window.innerHeight);
        //document.getElementById("canvas").appendChild(renderer.domElement);


        //var geometry = new THREE.BoxGeometry(1, 1, 1);
        //var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
        //var cube = new THREE.Mesh(geometry, material);
        //scene.add(cube);
        //renderer.render(scene, camera);


        //function Update(renderer, camera, scene) {

        //    renderer.render(scene, camera);
        //    requestAnimationFrame(function() {
        //        Update(renderer, camera, scene);
        //    });

        //};

        //Update(renderer, camera, scene);

        //DrawLine(0, 3, 0, 3, scene);


        //function DrawLine(x1,x2,y1, y2, scene) {
        //    const material = new THREE.LineBasicMaterial({ color: "rgb(255,0,0)" } );

        //        const geometry = new THREE.Geometry();
        //    geometry.vertices.push(new THREE.Vector2( x1,  y1) );
        //    geometry.vertices.push(new THREE.Vector2( x2, y2) );

        //    const line = new THREE.Line(geometry, material);

        //    scene.add(line);
        //    renderer.render(scene, camera);
        //}

        //var raycaster = new THREE.Raycaster();
        //var mouse = new THREE.Vector2();

        //function onMouseMove( event ) {

        //    // calculate mouse position in normalized device coordinates
        //    // (-1 to +1) for both components

        //    mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
        //    mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

        //}

        //function render() {

        //    // update the picking ray with the camera and mouse position
        //    raycaster.setFromCamera( mouse, camera );

        //    // calculate objects intersecting the picking ray
        //    var intersects = raycaster.intersectObjects( scene.children );

        //    for ( var i = 0; i < intersects.length; i++ ) {

        //        intersects[ i ].object.material.color.set( 0xff0000 );

        //    }

        //    renderer.render( scene, camera );

        //}

        //window.addEventListener( 'mousemove', onMouseMove, false );

        //window.requestAnimationFrame(render);


    </script>
}